/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DemoApp;


import static spark.Spark.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;



public class App {
    public static double averageOfIndex(ArrayList<Integer> arr1, ArrayList<Integer> arr2, Integer index1, Integer index2) throws Exception{

        
        if(arr1==null|| arr2==null || arr1.isEmpty() || arr2.isEmpty())
          throw new NullPointerException("Null Pointer Exception");
        else if(index1.intValue()<0 || index2.intValue()<0 )
          throw new Exception("Negative Index");
        else if(index1.intValue()>arr1.size() || index2.intValue()>arr2.size() )
          throw new IndexOutOfBoundsException("Index out ouf bounds");
   
        return (double)(arr1.get(index1) + arr2.get(index2))/2.0;
      
      }

      public static void main(String[] args) {

        port(getHerokuAssignedPort());
          get("/", (req, res) -> "Hello, World");
  
          post("/compute", (req, res) -> {
            //System.out.println(req.queryParams("input1"));
            //System.out.println(req.queryParams("input2"));
  
            String input1 = req.queryParams("input1");
            String input2 = req.queryParams("input2");
  
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            java.util.Scanner sc2 = new java.util.Scanner(input2);
  
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList1 = new java.util.ArrayList<>();
            java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
  
            while (sc1.hasNext())
            {
              int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
              inputList1.add(value);
            }
            sc1.close();
            System.out.println(inputList1);
  
  ////////////////////////////////////////////////////////////////////////
            sc2.useDelimiter("[;\r\n]+");
            while (sc2.hasNext())
            {
              int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
              inputList2.add(value);
            }
  
            sc2.close();
            System.out.println(inputList2);
  
  
            String input3 = req.queryParams("input3").replaceAll("\\s","");
            Integer input3AsInt = Integer.parseInt(input3);
  
            String input4 = req.queryParams("input4").replaceAll("\\s","");
            Integer input4AsInt = Integer.parseInt(input4);
  
            double result = App.averageOfIndex(inputList1,inputList2 , input3AsInt, input4AsInt);
  
            Map<String, Double> map = new HashMap<String, Double>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");
          }, new MustacheTemplateEngine());
  
  
          get("/compute",
              (rq, rs) -> {
                Map<String, String> map = new HashMap<String, String>();
                map.put("result", "not computed yet!");
                return new ModelAndView(map, "compute.mustache");            },
              new MustacheTemplateEngine());
  
  
      }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }


}
